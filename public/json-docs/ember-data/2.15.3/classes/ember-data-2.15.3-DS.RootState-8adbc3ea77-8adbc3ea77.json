{
  "data": {
    "id": "ember-data-2.15.3-DS.RootState",
    "type": "class",
    "attributes": {
      "name": "DS.RootState",
      "shortname": "DS.RootState",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember-data",
      "namespace": "DS",
      "file": "addon/-private/system/model/states.js",
      "line": 10,
      "description": "<html><head></head><body><h3 id=\"state\">State</h3>\n<p>Each record has a <code>currentState</code> property that explicitly tracks what\nstate a record is in at any given time. For instance, if a record is\nnewly created and has not yet been sent to the adapter to be saved,\nit would be in the <code>root.loaded.created.uncommitted</code> state.  If a\nrecord has had local modifications made to it that are in the\nprocess of being saved, the record would be in the\n<code>root.loaded.updated.inFlight</code> state. (This state paths will be\nexplained in more detail below.)</p>\n<p>Events are sent by the record or its store to the record&apos;s\n<code>currentState</code> property. How the state reacts to these events is\ndependent on which state it is in. In some states, certain events\nwill be invalid and will cause an exception to be raised.</p>\n<p>States are hierarchical and every state is a substate of the\n<code>RootState</code>. For example, a record can be in the\n<code>root.deleted.uncommitted</code> state, then transition into the\n<code>root.deleted.inFlight</code> state. If a child state does not implement\nan event handler, the state manager will attempt to invoke the event\non all parent states until the root state is reached. The state\nhierarchy of a record is described in terms of a path string. You\ncan determine a record&apos;s current state by getting the state&apos;s\n<code>stateName</code> property:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>record.get(&apos;currentState.<span class=\"keyword\">state</span>Name&apos;);\n//=&gt; <span class=\"string\">&quot;root.created.uncommitted&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The hierarchy of valid states that ship with ember data looks like\nthis:</p>\n<div class=\"highlight text\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">* root</span>\n<span class=\"comment\">  * deleted</span>\n<span class=\"comment\">    * saved</span>\n<span class=\"comment\">    * uncommitted</span>\n<span class=\"comment\">    * inFlight</span>\n<span class=\"comment\">  * empty</span>\n<span class=\"comment\">  * loaded</span>\n<span class=\"comment\">    * created</span>\n<span class=\"comment\">      * uncommitted</span>\n<span class=\"comment\">      * inFlight</span>\n<span class=\"comment\">    * saved</span>\n<span class=\"comment\">    * updated</span>\n<span class=\"comment\">      * uncommitted</span>\n<span class=\"comment\">      * inFlight</span>\n<span class=\"comment\">  * loading</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>DS.Model</code> states are themselves stateless. What that means is\nthat, the hierarchical states that each of <em>those</em> points to is a\nshared data structure. For performance reasons, instead of each\nrecord getting its own copy of the hierarchy of states, each record\npoints to this global, immutable shared instance. How does a state\nknow which record it should be acting on? We pass the record\ninstance into the state&apos;s event handlers as the first argument.</p>\n<p>The record passed as the first parameter is where you should stash\nstate about the record if needed; you should never store data on the state\nobject itself.</p>\n<h3 id=\"events-and-flags\">Events and Flags</h3>\n<p>A state may implement zero or more events and flags.</p>\n<h4 id=\"events\">Events</h4>\n<p>Events are named functions that are invoked when sent to a record. The\nrecord will first look for a method with the given name on the\ncurrent state. If no method is found, it will search the current\nstate&apos;s parent, and then its grandparent, and so on until reaching\nthe top of the hierarchy. If the root is reached without an event\nhandler being found, an exception will be raised. This can be very\nhelpful when debugging new features.</p>\n<p>Here&apos;s an example implementation of a state with a <code>myEvent</code> event handler:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">aState</span>: <span class=\"selector-tag\">DS</span><span class=\"selector-class\">.State</span><span class=\"selector-class\">.create</span>({\n  <span class=\"attribute\">myEvent</span>: <span class=\"built_in\">function</span>(manager, param) {\n    console.<span class=\"built_in\">log</span>(<span class=\"string\">&quot;Received myEvent with&quot;</span>, param);\n  }\n})</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>To trigger this event:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">record</span>.send(<span class=\"symbol\">&apos;myEvent</span>&apos;, <span class=\"symbol\">&apos;foo</span>&apos;);\n//=&gt; <span class=\"string\">&quot;Received myEvent with foo&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Note that an optional parameter can be sent to a record&apos;s <code>send()</code> method,\nwhich will be passed as the second parameter to the event handler.</p>\n<p>Events should transition to a different state if appropriate. This can be\ndone by calling the record&apos;s <code>transitionTo()</code> method with a path to the\ndesired state. The state manager will attempt to resolve the state path\nrelative to the current state. If no state is found at that path, it will\nattempt to resolve it relative to the current state&apos;s parent, and then its\nparent, and so on until the root is reached. For example, imagine a hierarchy\nlike this:</p>\n<div class=\"highlight \">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"comment\">* created</span>\n<span class=\"comment\">  * uncommitted &lt;-- currentState</span>\n<span class=\"comment\">  * inFlight</span>\n<span class=\"comment\">* updated</span>\n<span class=\"comment\">  * inFlight</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <p>If we are currently in the <code>uncommitted</code> state, calling\n<code>transitionTo(&apos;inFlight&apos;)</code> would transition to the <code>created.inFlight</code> state,\nwhile calling <code>transitionTo(&apos;updated.inFlight&apos;)</code> would transition to\nthe <code>updated.inFlight</code> state.</p>\n<p>Remember that <em>only events</em> should ever cause a state transition. You should\nnever call <code>transitionTo()</code> from outside a state&apos;s event handler. If you are\ntempted to do so, create a new event and send that to the state manager.</p>\n<h4 id=\"flags\">Flags</h4>\n<p>Flags are Boolean values that can be used to introspect a record&apos;s current\nstate in a more user-friendly way than examining its state path. For example,\ninstead of doing this:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>var <span class=\"keyword\">state</span>Path = record.get(&apos;<span class=\"keyword\">state</span>Manager.currentPath&apos;);\nif (<span class=\"keyword\">state</span>Path === &apos;created.<span class=\"keyword\">in</span>Flight&apos;) {\n  doSomething();\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can say:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">if</span> (<span class=\"keyword\">record</span>.get(<span class=\"symbol\">&apos;isNew</span>&apos;) &amp;&amp; <span class=\"keyword\">record</span>.get(<span class=\"symbol\">&apos;isSaving</span>&apos;)) {\n  doSomething();\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If your state does not set a value for a given flag, the value will\nbe inherited from its parent (or the first place in the state hierarchy\nwhere it is defined).</p>\n<p>The current set of flags are defined below. If you want to add a new flag,\nin addition to the area below, you will also need to declare it in the\n<code>DS.Model</code> class.</p>\n<ul>\n<li><a href=\"DS.Model.html#property_isEmpty\">isEmpty</a></li>\n<li><a href=\"DS.Model.html#property_isLoading\">isLoading</a></li>\n<li><a href=\"DS.Model.html#property_isLoaded\">isLoaded</a></li>\n<li><a href=\"DS.Model.html#property_hasDirtyAttributes\">hasDirtyAttributes</a></li>\n<li><a href=\"DS.Model.html#property_isSaving\">isSaving</a></li>\n<li><a href=\"DS.Model.html#property_isDeleted\">isDeleted</a></li>\n<li><a href=\"DS.Model.html#property_isNew\">isNew</a></li>\n<li><a href=\"DS.Model.html#property_isValid\">isValid</a></li>\n</ul>\n</body></html>",
      "version": "2.15.3",
      "since": "2.15.3",
      "methods": [],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-data-2.15.3-ember-data",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-data-2.15.3",
          "type": "project-version"
        }
      }
    }
  }
}