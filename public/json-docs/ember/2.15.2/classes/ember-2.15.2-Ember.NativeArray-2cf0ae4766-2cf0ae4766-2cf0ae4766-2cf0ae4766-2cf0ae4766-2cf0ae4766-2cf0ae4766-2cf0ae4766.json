{
  "data": {
    "id": "ember-2.15.2-Ember.NativeArray",
    "type": "class",
    "attributes": {
      "name": "Ember.NativeArray",
      "shortname": "Ember.NativeArray",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "submodule": "ember-runtime",
      "namespace": "Ember",
      "file": "packages/ember-runtime/lib/system/native_array.js",
      "line": 25,
      "description": "<html><head></head><body><p>The NativeArray mixin contains the properties needed to make the native\nArray support Ember.MutableArray and all of its dependent APIs. Unless you\nhave <code>EmberENV.EXTEND_PROTOTYPES</code> or <code>EmberENV.EXTEND_PROTOTYPES.Array</code> set to\nfalse, this will be applied automatically. Otherwise you can apply the mixin\nat anytime by calling <code>Ember.NativeArray.apply(Array.prototype)</code>.</p>\n</body></html>",
      "uses": [
        "Ember.Copyable",
        "Ember.Observable",
        "Ember.MutableArray"
      ],
      "access": "public",
      "tagname": "",
      "version": "2.15.2",
      "since": "2.15.2",
      "methods": [
        {
          "file": "packages/ember-runtime/lib/mixins/controller_content_model_alias_deprecation.js",
          "line": 19,
          "access": "private",
          "tagname": "Moves `content` to `model`  at extend time if a `model` is not also specified.\n\nNote that this currently modifies the mixin themselves, which is technically\ndubious but is practically of little consequence. This may change in the\nfuture.",
          "itemtype": "method",
          "name": "willMergeMixin",
          "since": "2.15.2",
          "class": "Ember.NativeArray",
          "module": "ember",
          "namespace": "Ember",
          "version": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Copyable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/copyable.js",
          "line": 30,
          "description": "<html><head></head><body><p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Override to return a copy of the receiver. Default implementation raises\nan exception.</p>\n</body></html>",
          "itemtype": "method",
          "name": "copy",
          "params": [
            {
              "name": "deep",
              "description": "if `true`, a deep copy of the object should be made",
              "type": "Boolean"
            }
          ],
          "return": {
            "description": "copy of receiver",
            "type": "Object"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Copyable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/copyable.js",
          "line": 43,
          "description": "<html><head></head><body><p>If the object implements <code>Ember.Freezable</code>, then this will return a new\ncopy if the object is not frozen and the receiver if the object is frozen.</p>\n<p>Raises an exception if you try to call this method on a object that does\nnot support freezing.</p>\n<p>You should use this method whenever you want a copy of a freezable object\nsince a freezable object can simply return itself without actually\nconsuming more memory.</p>\n</body></html>",
          "itemtype": "method",
          "name": "frozenCopy",
          "return": {
            "description": "copy of receiver or receiver",
            "type": "Object"
          },
          "deprecated": true,
          "deprecationMessage": "Use `Object.freeze` instead.",
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Copyable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 96,
          "description": "<html><head></head><body><p>Retrieves the value of a property from the object.</p>\n<p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>,\nhowever it supports both computed properties and the unknownProperty\nhandler.</p>\n<p>Because <code>get</code> unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>Computed properties are methods defined with the <code>property</code> modifier\ndeclared at the end, such as:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>fullName: Ember.computed(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, function() {\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>) + <span class=\"string\">&apos; &apos;</span> + <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastName&apos;</span>);\n})</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>When you call <code>get</code> on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>Likewise, if you try to call <code>get</code> on a property whose value is\n<code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object.\nIf this method returns any value other than <code>undefined</code>, it will be returned\ninstead. This allows you to implement &quot;virtual&quot; properties that are\nnot defined upfront.</p>\n</body></html>",
          "itemtype": "method",
          "name": "get",
          "params": [
            {
              "name": "keyName",
              "description": "The property to retrieve",
              "type": "String"
            }
          ],
          "return": {
            "description": "The property value or undefined.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 139,
          "description": "<html><head></head><body><p>To get the values of multiple properties at once, call <code>getProperties</code>\nwith a list of strings or an array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>record.getProperties(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;zipCode&apos;</span>);\n<span class=\"regexp\">//</span> { firstName: <span class=\"string\">&apos;John&apos;</span>, lastName: <span class=\"string\">&apos;Doe&apos;</span>, zipCode: <span class=\"string\">&apos;10011&apos;</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>is equivalent to:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>record.getProperties([<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;zipCode&apos;</span>]);\n<span class=\"regexp\">//</span> { firstName: <span class=\"string\">&apos;John&apos;</span>, lastName: <span class=\"string\">&apos;Doe&apos;</span>, zipCode: <span class=\"string\">&apos;10011&apos;</span> }</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getProperties",
          "params": [
            {
              "name": "list",
              "description": "of keys to get",
              "type": "String...|Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 164,
          "description": "<html><head></head><body><p>Sets the provided key or path to the value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"built_in\">record</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&quot;key&quot;</span>, value);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This method is generally very similar to calling <code>object[&quot;key&quot;] = value</code> or\n<code>object.key = value</code>, except that it provides support for computed\nproperties, the <code>setUnknownProperty()</code> method and property observers.</p>\n<h3 id=\"computed-properties\">Computed Properties</h3>\n<p>If you try to set a value on a key that has a computed property handler\ndefined (see the <code>get()</code> method for an example), then <code>set()</code> will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.</p>\n<h3 id=\"unknown-properties\">Unknown Properties</h3>\n<p>If you try to set a value on a key that is undefined in the target\nobject, then the <code>setUnknownProperty()</code> handler will be called instead. This\ngives you an opportunity to implement complex &quot;virtual&quot; properties that\nare not predefined on the object. If <code>setUnknownProperty()</code> returns\nundefined, then <code>set()</code> will simply set the value on the object.</p>\n<h3 id=\"property-observers\">Property Observers</h3>\n<p>In addition to changing the property, <code>set()</code> will also register a property\nchange with the object. Unless you have placed this call inside of a\n<code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any &quot;local&quot; observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any &quot;remote&quot; observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.</p>\n</body></html>",
          "itemtype": "method",
          "name": "set",
          "params": [
            {
              "name": "keyName",
              "description": "The property to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The value to set or `null`.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed value",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 213,
          "description": "<html><head></head><body><p>Sets a list of properties at once. These properties are set inside\na single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so\nobservers will be buffered.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">record</span><span class=\"selector-class\">.setProperties</span>({ <span class=\"attribute\">firstName</span>: <span class=\"string\">&apos;Charles&apos;</span>, lastName: <span class=\"string\">&apos;Jolley&apos;</span> });</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setProperties",
          "params": [
            {
              "name": "hash",
              "description": "the hash of keys and values to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The passed in hash",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 231,
          "description": "<html><head></head><body><p>Begins a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n<code>endPropertyChanges()</code> to deliver the deferred change notifications and end\ndeferring.</p>\n</body></html>",
          "itemtype": "method",
          "name": "beginPropertyChanges",
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 251,
          "description": "<html><head></head><body><p>Ends a grouping of property changes.</p>\n<p>You can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n<code>beginPropertyChanges()</code> at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.</p>\n</body></html>",
          "itemtype": "method",
          "name": "endPropertyChanges",
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 270,
          "description": "<html><head></head><body><p>Notify the observer system that a property is about to change.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyDidChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n</body></html>",
          "itemtype": "method",
          "name": "propertyWillChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key that is about to change.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 294,
          "description": "<html><head></head><body><p>Notify the observer system that a property has just changed.</p>\n<p>Sometimes you need to change a value directly or indirectly without\nactually calling <code>get()</code> or <code>set()</code> on it. In this case, you can use this\nmethod and <code>propertyWillChange()</code> instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.</p>\n<p>Note that you must always call <code>propertyWillChange</code> and <code>propertyDidChange</code>\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.</p>\n</body></html>",
          "itemtype": "method",
          "name": "propertyDidChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key that has just changed.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 318,
          "description": "<html><head></head><body><p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in\nsuccession.</p>\n</body></html>",
          "itemtype": "method",
          "name": "notifyPropertyChange",
          "params": [
            {
              "name": "keyName",
              "description": "The property key to be notified about.",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Observable"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 333,
          "description": "<html><head></head><body><p>Adds an observer on a property.</p>\n<p>This is the core method used to register an observer for a property.</p>\n<p>Once you call this method, any time the key&apos;s value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.</p>\n<h3 id=\"observer-methods\">Observer Methods</h3>\n<p>Observer methods have the following signature:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td>\n              <td class=\"code\"><pre>export <span class=\"keyword\">default</span> Ember.Component.extend({\n  init() {\n    <span class=\"keyword\">this</span>._super(...arguments);\n    <span class=\"keyword\">this</span>.addObserver(<span class=\"string\">&apos;foo&apos;</span>, <span class=\"keyword\">this</span>, <span class=\"string\">&apos;fooDidChange&apos;</span>);\n  },\n\n  fooDidChange(sender, key, value, rev) {\n    <span class=\"comment\">// your code</span>\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>The <code>sender</code> is the object that changed. The <code>key</code> is the property that\nchanges. The <code>value</code> property is currently reserved and unused. The <code>rev</code>\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.</p>\n<p>Usually you will not need the value or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren&apos;t interested in\nany of these values, to write an observer that has no parameters at all.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 380,
          "description": "<html><head></head><body><p>Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to <code>addObserver()</code> and your\ntarget will no longer receive notifications.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeObserver",
          "params": [
            {
              "name": "key",
              "description": "The key to observe",
              "type": "String"
            },
            {
              "name": "target",
              "description": "The target object to invoke",
              "type": "Object"
            },
            {
              "name": "method",
              "description": "The method to invoke",
              "type": "String|Function"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 395,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "hasObserverFor",
          "params": [
            {
              "name": "key",
              "description": "Key to check",
              "type": "String"
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 410,
          "description": "<html><head></head><body><p>Retrieves the value of a property, or a default value in the case that the\nproperty returns <code>undefined</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">person</span><span class=\"selector-class\">.getWithDefault</span>(<span class=\"string\">&apos;lastName&apos;</span>, <span class=\"string\">&apos;Doe&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "getWithDefault",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to retrieve",
              "type": "String"
            },
            {
              "name": "defaultValue",
              "description": "The value to return if the property value is undefined",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The property value or the defaultValue.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 428,
          "description": "<html><head></head><body><p>Set the value of a property to the current value plus some amount.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">person</span><span class=\"selector-class\">.incrementProperty</span>(<span class=\"string\">&apos;age&apos;</span>);\n<span class=\"selector-tag\">team</span><span class=\"selector-class\">.incrementProperty</span>(<span class=\"string\">&apos;score&apos;</span>, <span class=\"number\">2</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "incrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to increment",
              "type": "String"
            },
            {
              "name": "increment",
              "description": "The amount to increment by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 448,
          "description": "<html><head></head><body><p>Set the value of a property to the current value minus some amount.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">player</span><span class=\"selector-class\">.decrementProperty</span>(<span class=\"string\">&apos;lives&apos;</span>);\n<span class=\"selector-tag\">orc</span><span class=\"selector-class\">.decrementProperty</span>(<span class=\"string\">&apos;health&apos;</span>, <span class=\"number\">5</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "decrementProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to decrement",
              "type": "String"
            },
            {
              "name": "decrement",
              "description": "The amount to decrement by. Defaults to 1",
              "type": "Number"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 468,
          "description": "<html><head></head><body><p>Set the value of a boolean property to the opposite of its\ncurrent value.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">starship</span><span class=\"selector-class\">.toggleProperty</span>(<span class=\"string\">&apos;warpDriveEngaged&apos;</span>);</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "toggleProperty",
          "params": [
            {
              "name": "keyName",
              "description": "The name of the property to toggle",
              "type": "String"
            }
          ],
          "return": {
            "description": "The new property value",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/observable.js",
          "line": 485,
          "description": "<html><head></head><body><p>Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.</p>\n</body></html>",
          "itemtype": "method",
          "name": "cacheFor",
          "params": [
            {
              "name": "keyName",
              "description": "",
              "type": "String"
            }
          ],
          "return": {
            "description": "The cached value of the computed property, if any",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Observable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 63,
          "description": "<html><head></head><body><p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>This is one of the primitives you must implement to support <code>Ember.Array</code>.\nYou should replace amt objects started at idx with the objects in the\npassed array. You should also call <code>this.enumerableContentDidChange()</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "replace",
          "params": [
            {
              "name": "idx",
              "description": "Starting index in the array to replace. If\n  idx >= length, then append to the end of the array.",
              "type": "Number"
            },
            {
              "name": "amt",
              "description": "Number of elements that should be removed from\n  the array, starting at *idx*.",
              "type": "Number"
            },
            {
              "name": "objects",
              "description": "An array of zero or more objects that should be\n  inserted into the array at *idx*",
              "type": "Array"
            }
          ],
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 81,
          "description": "<html><head></head><body><p>Remove all elements from the array. This is useful if you\nwant to reuse an existing array without having to recreate it.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>];\n\ncolors.<span class=\"built_in\">length</span>;  <span class=\"comment\">// 3</span>\ncolors.<span class=\"keyword\">clear</span>(); <span class=\"comment\">// []</span>\ncolors.<span class=\"built_in\">length</span>;  <span class=\"comment\">// 0</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "clear",
          "return": {
            "description": "An empty Array.",
            "type": "Ember.Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 107,
          "description": "<html><head></head><body><p>This will use the primitive <code>replace()</code> method to insert an object at the\nspecified index.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"symbol\">&apos;red</span>&apos;, <span class=\"symbol\">&apos;green</span>&apos;, <span class=\"symbol\">&apos;blue</span>&apos;];\n\ncolors.insertAt(<span class=\"number\">2</span>, <span class=\"symbol\">&apos;yellow</span>&apos;);  // [<span class=\"symbol\">&apos;red</span>&apos;, <span class=\"symbol\">&apos;green</span>&apos;, <span class=\"symbol\">&apos;yellow</span>&apos;, <span class=\"symbol\">&apos;blue</span>&apos;]\ncolors.insertAt(<span class=\"number\">5</span>, <span class=\"symbol\">&apos;orange</span>&apos;);  // <span class=\"literal\">Error</span>: Index <span class=\"keyword\">out</span> <span class=\"keyword\">of</span> <span class=\"keyword\">range</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "insertAt",
          "params": [
            {
              "name": "idx",
              "description": "index of insert the object at.",
              "type": "Number"
            },
            {
              "name": "object",
              "description": "object to insert",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 133,
          "description": "<html><head></head><body><p>Remove an object at the specified index using the <code>replace()</code> primitive\nmethod. You can pass either a single index, or a start and a length.</p>\n<p>If you pass a start and length that is beyond the\nlength this method will throw an <code>OUT_OF_RANGE_EXCEPTION</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"symbol\">&apos;red</span>&apos;, <span class=\"symbol\">&apos;green</span>&apos;, <span class=\"symbol\">&apos;blue</span>&apos;, <span class=\"symbol\">&apos;yellow</span>&apos;, <span class=\"symbol\">&apos;orange</span>&apos;];\n\ncolors.removeAt(<span class=\"number\">0</span>);     // [<span class=\"symbol\">&apos;green</span>&apos;, <span class=\"symbol\">&apos;blue</span>&apos;, <span class=\"symbol\">&apos;yellow</span>&apos;, <span class=\"symbol\">&apos;orange</span>&apos;]\ncolors.removeAt(<span class=\"number\">2</span>, <span class=\"number\">2</span>);  // [<span class=\"symbol\">&apos;green</span>&apos;, <span class=\"symbol\">&apos;blue</span>&apos;]\ncolors.removeAt(<span class=\"number\">4</span>, <span class=\"number\">2</span>);  // <span class=\"literal\">Error</span>: Index <span class=\"keyword\">out</span> <span class=\"keyword\">of</span> <span class=\"keyword\">range</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "removeAt",
          "params": [
            {
              "name": "start",
              "description": "index, start of range",
              "type": "Number"
            },
            {
              "name": "len",
              "description": "length of passing range",
              "type": "Number"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 158,
          "description": "<html><head></head><body><p>Push the object onto the end of the array. Works just like <code>push()</code> but it\nis KVO-compliant.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>];\n\ncolors.pushObject(<span class=\"string\">&apos;black&apos;</span>);     // [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;black&apos;</span>]\ncolors.pushObject([<span class=\"string\">&apos;yellow&apos;</span>]);  // [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, [<span class=\"string\">&apos;yellow&apos;</span>]]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "pushObject",
          "params": [
            {
              "name": "obj",
              "description": "object to push",
              "type": "*"
            }
          ],
          "return": {
            "description": "object same object passed as a param"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 179,
          "description": "<html><head></head><body><p>Add the objects in the passed numerable to the end of the array. Defers\nnotifying observers of the change until all objects are added.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"string\">&apos;red&apos;</span>];\n\ncolors.pushObjects([<span class=\"string\">&apos;yellow&apos;</span>, <span class=\"string\">&apos;orange&apos;</span>]);  // [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;yellow&apos;</span>, <span class=\"string\">&apos;orange&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "pushObjects",
          "params": [
            {
              "name": "objects",
              "description": "the objects to add",
              "type": "Ember.Enumerable"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 202,
          "description": "<html><head></head><body><p>Pop object from array or nil if none are left. Works just like <code>pop()</code> but\nit is KVO-compliant.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>];\n\ncolors.popObject();   <span class=\"regexp\">//</span> <span class=\"string\">&apos;blue&apos;</span>\nconsole.log(colors);  <span class=\"regexp\">//</span> [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "popObject",
          "return": {
            "description": "object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 228,
          "description": "<html><head></head><body><p>Shift an object from start of array or nil if none are left. Works just\nlike <code>shift()</code> but it is KVO-compliant.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>];\n\ncolors.shiftObject();  <span class=\"regexp\">//</span> <span class=\"string\">&apos;red&apos;</span>\nconsole.log(colors);   <span class=\"regexp\">//</span> [<span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "shiftObject",
          "return": {
            "description": "object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 253,
          "description": "<html><head></head><body><p>Unshift an object to start of array. Works just like <code>unshift()</code> but it is\nKVO-compliant.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"string\">&apos;red&apos;</span>];\n\ncolors.unshiftObject(<span class=\"string\">&apos;yellow&apos;</span>);    // [<span class=\"string\">&apos;yellow&apos;</span>, <span class=\"string\">&apos;red&apos;</span>]\ncolors.unshiftObject([<span class=\"string\">&apos;black&apos;</span>]);   // [[<span class=\"string\">&apos;black&apos;</span>], <span class=\"string\">&apos;yellow&apos;</span>, <span class=\"string\">&apos;red&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "unshiftObject",
          "params": [
            {
              "name": "obj",
              "description": "object to unshift",
              "type": "*"
            }
          ],
          "return": {
            "description": "object same object passed as a param"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 274,
          "description": "<html><head></head><body><p>Adds the named objects to the beginning of the array. Defers notifying\nobservers until all objects have been added.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"symbol\">&apos;red</span>&apos;];\n\ncolors.unshiftObjects([<span class=\"symbol\">&apos;black</span>&apos;, <span class=\"symbol\">&apos;white</span>&apos;]);   // [<span class=\"symbol\">&apos;black</span>&apos;, <span class=\"symbol\">&apos;white</span>&apos;, <span class=\"symbol\">&apos;red</span>&apos;]\ncolors.unshiftObjects(<span class=\"symbol\">&apos;yellow</span>&apos;); // <span class=\"keyword\">Type</span> <span class=\"type\">Error: </span><span class=\"symbol\">&apos;undefined</span>&apos; <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> a <span class=\"keyword\">function</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "unshiftObjects",
          "params": [
            {
              "name": "objects",
              "description": "the objects to add",
              "type": "Ember.Enumerable"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 295,
          "description": "<html><head></head><body><p>Reverse objects in the array. Works just like <code>reverse()</code> but it is\nKVO-compliant.</p>\n</body></html>",
          "itemtype": "method",
          "name": "reverseObjects",
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 314,
          "description": "<html><head></head><body><p>Replace all the receiver&apos;s content with content of the argument.\nIf argument is an empty array receiver will be cleared.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let colors = [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>];\n\ncolors.setObjects([<span class=\"string\">&apos;black&apos;</span>, <span class=\"string\">&apos;white&apos;</span>]);  // [<span class=\"string\">&apos;black&apos;</span>, <span class=\"string\">&apos;white&apos;</span>]\ncolors.setObjects([]);                  // []</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "setObjects",
          "params": [
            {
              "name": "objects",
              "description": "array whose content will be used for replacing\n    the content of the receiver",
              "type": "Ember.Array"
            }
          ],
          "return": {
            "description": "receiver with the new content",
            "type": "Ember.Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 345,
          "description": "<html><head></head><body><p>Remove all occurrences of an object in the array.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>let cities = [<span class=\"string\">&apos;Chicago&apos;</span>, <span class=\"string\">&apos;Berlin&apos;</span>, <span class=\"string\">&apos;Lima&apos;</span>, <span class=\"string\">&apos;Chicago&apos;</span>];\n\ncities.removeObject(<span class=\"string\">&apos;Chicago&apos;</span>);  // [<span class=\"string\">&apos;Berlin&apos;</span>, <span class=\"string\">&apos;Lima&apos;</span>]\ncities.removeObject(<span class=\"string\">&apos;Lima&apos;</span>);     // [<span class=\"string\">&apos;Berlin&apos;</span>]\ncities.removeObject(<span class=\"string\">&apos;Tokyo&apos;</span>)     // [<span class=\"string\">&apos;Berlin&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "removeObject",
          "params": [
            {
              "name": "obj",
              "description": "object to remove",
              "type": "*"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
          "line": 373,
          "description": "<html><head></head><body><p>Push the object onto the end of the array if it is not already\npresent in the array.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let cities = [<span class=\"string\">&apos;Chicago&apos;</span>, <span class=\"string\">&apos;Berlin&apos;</span>];\n\ncities.addObject(<span class=\"string\">&apos;Lima&apos;</span>);    // [<span class=\"string\">&apos;Chicago&apos;</span>, <span class=\"string\">&apos;Berlin&apos;</span>, <span class=\"string\">&apos;Lima&apos;</span>]\ncities.addObject(<span class=\"string\">&apos;Berlin&apos;</span>);  // [<span class=\"string\">&apos;Chicago&apos;</span>, <span class=\"string\">&apos;Berlin&apos;</span>, <span class=\"string\">&apos;Lima&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "addObject",
          "params": [
            {
              "name": "obj",
              "description": "object to add, if not already present",
              "type": "*"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.MutableArray"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 55,
          "description": "<html><head></head><body><p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Attempts to add the passed object to the receiver if the object is not\nalready present in the collection. If the object is present, this method\nhas no effect.</p>\n<p>If the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addObject",
          "params": [
            {
              "name": "object",
              "description": "The object to add to the enumerable.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the passed object",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 72,
          "description": "<html><head></head><body><p>Adds each object in the passed enumerable to the receiver.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addObjects",
          "params": [
            {
              "name": "objects",
              "description": "the objects to add.",
              "type": "Ember.Enumerable"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 87,
          "description": "<html><head></head><body><p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Attempts to remove the passed object from the receiver collection if the\nobject is present in the collection. If the object is not present,\nthis method has no effect.</p>\n<p>If the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeObject",
          "params": [
            {
              "name": "object",
              "description": "The object to remove from the enumerable.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the passed object",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
          "line": 105,
          "description": "<html><head></head><body><p>Removes each object in the passed enumerable from the receiver.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeObjects",
          "params": [
            {
              "name": "objects",
              "description": "the objects to remove",
              "type": "Ember.Enumerable"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.MutableEnumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 231,
          "description": "<html><head></head><body><p>Returns the object at the given <code>index</code>. If the given <code>index</code> is negative\nor is greater or equal than the array length, returns <code>undefined</code>.</p>\n<p>This is one of the primitives you must implement to support <code>Ember.Array</code>.\nIf your object supports retrieving the value of an array item using <code>get()</code>\n(i.e. <code>myArray.get(0)</code>), then you do not need to implement this method\nyourself.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"string\">&apos;d&apos;</span>];\n\narr.objectAt<span class=\"comment\">(0)</span>;   <span class=\"comment\">// &apos;a&apos;</span>\narr.objectAt<span class=\"comment\">(3)</span>;   <span class=\"comment\">// &apos;d&apos;</span>\narr.objectAt<span class=\"comment\">(-1)</span>;  <span class=\"comment\">// undefined</span>\narr.objectAt<span class=\"comment\">(4)</span>;   <span class=\"comment\">// undefined</span>\narr.objectAt<span class=\"comment\">(5)</span>;   <span class=\"comment\">// undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "objectAt",
          "params": [
            {
              "name": "idx",
              "description": "The index of the item to return.",
              "type": "Number"
            }
          ],
          "return": {
            "description": "item at index or undefined",
            "type": "*"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 263,
          "description": "<html><head></head><body><p>This returns the objects at the specified indexes, using <code>objectAt</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"string\">&apos;d&apos;</span>];\n\narr.objectsAt([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);  // [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>]\narr.objectsAt([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);  // [<span class=\"string\">&apos;c&apos;</span>, <span class=\"string\">&apos;d&apos;</span>, undefined]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "objectsAt",
          "params": [
            {
              "name": "indexes",
              "description": "An array of indexes of items to return.",
              "type": "Array"
            }
          ],
          "return": {
            "description": "",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 328,
          "description": "<html><head></head><body><p>Returns a new array that is a slice of the receiver. This implementation\nuses the observable array methods to retrieve the objects for the new\nslice.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>];\n\narr.slice(<span class=\"number\">0</span>);       // [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>]\narr.slice(<span class=\"number\">0</span>, <span class=\"number\">2</span>);    // [<span class=\"string\">&apos;red&apos;</span>, <span class=\"string\">&apos;green&apos;</span>]\narr.slice(<span class=\"number\">1</span>, <span class=\"number\">100</span>);  // [<span class=\"string\">&apos;green&apos;</span>, <span class=\"string\">&apos;blue&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "slice",
          "params": [
            {
              "name": "beginIndex",
              "description": "(Optional) index to begin slicing from.",
              "type": "Number"
            },
            {
              "name": "endIndex",
              "description": "(Optional) index to end the slice at (but not included).",
              "type": "Number"
            }
          ],
          "return": {
            "description": "New array with specified slice",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 374,
          "description": "<html><head></head><body><p>Returns the index of the given object&apos;s first occurrence.\nIf no <code>startAt</code> argument is given, the starting location to\nsearch is 0. If it&apos;s negative, will count backward from\nthe end of the array. Returns -1 if no match is found.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"string\">&apos;d&apos;</span>, <span class=\"string\">&apos;a&apos;</span>];\n\narr.indexOf(<span class=\"string\">&apos;a&apos;</span>);       <span class=\"comment\">//  0</span>\narr.indexOf(<span class=\"string\">&apos;z&apos;</span>);       <span class=\"comment\">// -1</span>\narr.indexOf(<span class=\"string\">&apos;a&apos;</span>, <span class=\"number\">2</span>);    <span class=\"comment\">//  4</span>\narr.indexOf(<span class=\"string\">&apos;a&apos;</span>, -<span class=\"number\">1</span>);   <span class=\"comment\">//  4</span>\narr.indexOf(<span class=\"string\">&apos;b&apos;</span>, <span class=\"number\">3</span>);    <span class=\"comment\">// -1</span>\narr.indexOf(<span class=\"string\">&apos;a&apos;</span>, <span class=\"number\">100</span>);  <span class=\"comment\">// -1</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "indexOf",
          "params": [
            {
              "name": "object",
              "description": "the item to search for",
              "type": "Object"
            },
            {
              "name": "startAt",
              "description": "optional starting location to search, default 0",
              "type": "Number"
            }
          ],
          "return": {
            "description": "index or -1 if not found",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 417,
          "description": "<html><head></head><body><p>Returns the index of the given object&apos;s last occurrence.\nIf no <code>startAt</code> argument is given, the search starts from\nthe last position. If it&apos;s negative, will count backward\nfrom the end of the array. Returns -1 if no match is found.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"string\">&apos;d&apos;</span>, <span class=\"string\">&apos;a&apos;</span>];\n\narr.lastIndexOf(<span class=\"string\">&apos;a&apos;</span>);       <span class=\"comment\">//  4</span>\narr.lastIndexOf(<span class=\"string\">&apos;z&apos;</span>);       <span class=\"comment\">// -1</span>\narr.lastIndexOf(<span class=\"string\">&apos;a&apos;</span>, <span class=\"number\">2</span>);    <span class=\"comment\">//  0</span>\narr.lastIndexOf(<span class=\"string\">&apos;a&apos;</span>, -<span class=\"number\">1</span>);   <span class=\"comment\">//  4</span>\narr.lastIndexOf(<span class=\"string\">&apos;b&apos;</span>, <span class=\"number\">3</span>);    <span class=\"comment\">//  1</span>\narr.lastIndexOf(<span class=\"string\">&apos;a&apos;</span>, <span class=\"number\">100</span>);  <span class=\"comment\">//  4</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "lastIndexOf",
          "params": [
            {
              "name": "object",
              "description": "the item to search for",
              "type": "Object"
            },
            {
              "name": "startAt",
              "description": "optional starting location to search, default 0",
              "type": "Number"
            }
          ],
          "return": {
            "description": "index or -1 if not found",
            "type": "Number"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 464,
          "description": "<html><head></head><body><p>Adds an array observer to the receiving array. The array observer object\nnormally must implement two methods:</p>\n<ul>\n<li><code>arrayWillChange(observedObj, start, removeCount, addCount)</code> - This method will be\ncalled just before the array is modified.</li>\n<li><code>arrayDidChange(observedObj, start, removeCount, addCount)</code> - This method will be\ncalled just after the array is modified.</li>\n</ul>\n<p>Both callbacks will be passed the observed object, starting index of the\nchange as well as a count of the items to be removed and added. You can use\nthese callbacks to optionally inspect the array during the change, clear\ncaches, or do any other bookkeeping necessary.</p>\n<p>In addition to passing a target, you can also include an options hash\nwhich you can use to override the method names that will be invoked on the\ntarget.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addArrayObserver",
          "params": [
            {
              "name": "target",
              "description": "The observer object.",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "Optional hash of configuration options including\n  `willChange` and `didChange` option.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 494,
          "description": "<html><head></head><body><p>Removes an array observer from the object if the observer is current\nregistered. Calling this method multiple times with the same object will\nhave no effect.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeArrayObserver",
          "params": [
            {
              "name": "target",
              "description": "The object observing the array.",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "Optional hash of configuration options including\n  `willChange` and `didChange` option.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 521,
          "description": "<html><head></head><body><p>If you are implementing an object that supports <code>Ember.Array</code>, call this\nmethod just before the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.</p>\n</body></html>",
          "itemtype": "method",
          "name": "arrayContentWillChange",
          "params": [
            {
              "name": "startIdx",
              "description": "The starting index in the array that will change.",
              "type": "Number"
            },
            {
              "name": "removeAmt",
              "description": "The number of items that will be removed. If you\n  pass `null` assumes 0",
              "type": "Number"
            },
            {
              "name": "addAmt",
              "description": "The number of items that will be added. If you\n  pass `null` assumes 0.",
              "type": "Number"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 540,
          "description": "<html><head></head><body><p>If you are implementing an object that supports <code>Ember.Array</code>, call this\nmethod just after the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.</p>\n</body></html>",
          "itemtype": "method",
          "name": "arrayContentDidChange",
          "params": [
            {
              "name": "startIdx",
              "description": "The starting index in the array that did change.",
              "type": "Number"
            },
            {
              "name": "removeAmt",
              "description": "The number of items that were removed. If you\n  pass `null` assumes 0",
              "type": "Number"
            },
            {
              "name": "addAmt",
              "description": "The number of items that were added. If you\n  pass `null` assumes 0.",
              "type": "Number"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Ember.Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 559,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed object can be found in the array.\nThis method is a Polyfill for ES 2016 Array.includes.\nIf no <code>startAt</code> argument is given, the starting location to\nsearch is 0. If it&apos;s negative, searches from the index of\n<code>this.length + startAt</code> by asc.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n              <td class=\"code\"><pre>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">2</span>);     <span class=\"comment\">// true</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">4</span>);     <span class=\"comment\">// false</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">3</span>, <span class=\"number\">2</span>);  <span class=\"comment\">// true</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">3</span>, <span class=\"number\">3</span>);  <span class=\"comment\">// false</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">3</span>, <span class=\"number\">-1</span>); <span class=\"comment\">// true</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">1</span>, <span class=\"number\">-1</span>); <span class=\"comment\">// false</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">1</span>, <span class=\"number\">-4</span>); <span class=\"comment\">// true</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, NaN].includes(NaN); <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "includes",
          "params": [
            {
              "name": "obj",
              "description": "The object to search for.",
              "type": "Object"
            },
            {
              "name": "startAt",
              "description": "optional starting location to search, default 0",
              "type": "Number"
            }
          ],
          "return": {
            "description": "`true` if object is found in the array.",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 96,
          "description": "<html><head></head><body><p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Implement this method to make your class enumerable.</p>\n<p>This method will be called repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don&apos;t have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.</p>\n<p>The <code>previousObject</code> is the object that was returned from the last call\nto <code>nextObject</code> for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.</p>\n<p>Finally the context parameter will always contain a hash you can use as\na &quot;scratchpad&quot; to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.</p>\n<p>Generally iterators will continue to call <code>nextObject</code> until the index\nreaches the current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.</p>\n<p>The default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.</p>\n</body></html>",
          "itemtype": "method",
          "name": "nextObject",
          "params": [
            {
              "name": "index",
              "description": "the current index of the iteration",
              "type": "Number"
            },
            {
              "name": "previousObject",
              "description": "the value returned by the last call to\n  `nextObject`.",
              "type": "Object"
            },
            {
              "name": "context",
              "description": "a context object you can use to maintain state.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the next object in the iteration or undefined",
            "type": "Object"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 211,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\n\narr.contains(<span class=\"string\">&apos;a&apos;</span>); <span class=\"regexp\">//</span> <span class=\"keyword\">true</span>\narr.contains(<span class=\"string\">&apos;z&apos;</span>); <span class=\"regexp\">//</span> <span class=\"keyword\">false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "contains",
          "deprecated": true,
          "deprecationMessage": "Use `Enumerable#includes` instead. See https://emberjs.com/deprecations/v2.x#toc_enumerable-contains",
          "params": [
            {
              "name": "obj",
              "description": "The object to search for.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "`true` if object is found in enumerable.",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 241,
          "description": "<html><head></head><body><p>Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the <code>forEach()</code> method defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "forEach",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 292,
          "description": "<html><head></head><body><p>Alias for <code>mapBy</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "getEach",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 302,
          "description": "<html><head></head><body><p>Sets the value on the named property for each member. This is more\nergonomic than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to <code>set(),</code> otherwise\nit will be set directly. <code>null</code> objects are skipped.</p>\n</body></html>",
          "itemtype": "method",
          "name": "setEach",
          "params": [
            {
              "name": "key",
              "description": "The key to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The object to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 318,
          "description": "<html><head></head><body><p>Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to <code>map()</code> defined in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the mapped value.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "map",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 353,
          "description": "<html><head></head><body><p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n</body></html>",
          "itemtype": "method",
          "name": "mapBy",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 366,
          "description": "<html><head></head><body><p>Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to <code>filter()</code> defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "filter",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A filtered array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 407,
          "description": "<html><head></head><body><p>Returns an array with all of the items in the enumeration where the passed\nfunction returns false. This method is the inverse of filter().</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><em>item</em> is the current item in the iteration.</li>\n<li><em>index</em> is the current index in the iteration</li>\n<li><em>enumerable</em> is the enumerable object itself.</li>\n</ul>\n<p>It should return a falsey value to include the item in the results.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as &quot;this&quot; on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "reject",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A rejected array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 440,
          "description": "<html><head></head><body><p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "filterBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "*",
              "optional": true
            }
          ],
          "return": {
            "description": "filtered array",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 455,
          "description": "<html><head></head><body><p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n</body></html>",
          "itemtype": "method",
          "name": "rejectBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "rejected array",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 474,
          "description": "<html><head></head><body><p>Returns the first item in the array for which the callback returns true.\nThis method works similar to the <code>filter()</code> method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "find",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "Found item or `undefined`.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 532,
          "description": "<html><head></head><body><p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n</body></html>",
          "itemtype": "method",
          "name": "findBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "found item or `undefined`",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 549,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed function returns true for every item in the\nenumeration. This corresponds with the <code>every()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> or <code>false</code>.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">if</span> (people.<span class=\"keyword\">every</span>(isEngineer)) {\n  Paychecks.addBigBonus();\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "every",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 588,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed property resolves to the value of the second\nargument for all items in the enumerable. This method is often simpler/faster\nthan using a callback.</p>\n<p>Note that like the native <code>Array.every</code>, <code>isEvery</code> will return true when called\non any empty enumerable.</p>\n</body></html>",
          "itemtype": "method",
          "name": "isEvery",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against. Defaults to `true`",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "2.15.2",
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 607,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">if</span> (people.<span class=\"built_in\">any</span>(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "any",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 665,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed property resolves to the value of the second\nargument for any item in the enumerable. This method is often simpler/faster\nthan using a callback.</p>\n</body></html>",
          "itemtype": "method",
          "name": "isAny",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against. Defaults to `true`",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "2.15.2",
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 681,
          "description": "<html><head></head><body><p>This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the <code>reduce()</code> method defined in JavaScript 1.8.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(previousValue, item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>previousValue</code> is the value returned by the last call to the iterator.</li>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Return the new cumulative value.</p>\n<p>In addition to the callback you can also pass an <code>initialValue</code>. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.</p>\n<p>Note that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It&apos;s part of the\nspec. Sorry.</p>\n</body></html>",
          "itemtype": "method",
          "name": "reduce",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "initialValue",
              "description": "Initial value for the reduce",
              "type": "Object"
            },
            {
              "name": "reducerProperty",
              "description": "internal use only.",
              "type": "String"
            }
          ],
          "return": {
            "description": "The reduced value.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 729,
          "description": "<html><head></head><body><p>Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.</p>\n</body></html>",
          "itemtype": "method",
          "name": "invoke",
          "params": [
            {
              "name": "methodName",
              "description": "the name of the method",
              "type": "String"
            },
            {
              "name": "args",
              "description": "optional arguments to pass as well.",
              "type": "Object..."
            }
          ],
          "return": {
            "description": "return values from calling invoke.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 754,
          "description": "<html><head></head><body><p>Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.</p>\n</body></html>",
          "itemtype": "method",
          "name": "toArray",
          "return": {
            "description": "the enumerable as an array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 770,
          "description": "<html><head></head><body><p>Returns a copy of the array with all <code>null</code> and <code>undefined</code> elements removed.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"literal\">null</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"literal\">undefined</span>];\narr.compact();  <span class=\"comment\">// [&apos;a&apos;, &apos;c&apos;]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "compact",
          "return": {
            "description": "the array without null and undefined elements.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 786,
          "description": "<html><head></head><body><p>Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type.\nIf the receiver does not contain the value it returns the original enumerable.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\narr.without(<span class=\"string\">&apos;a&apos;</span>);  // [<span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "without",
          "params": [
            {
              "name": "value",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Enumerable"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 818,
          "description": "<html><head></head><body><p>Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;b&apos;</span>];\narr.uni<span class=\"string\">q()</span>;  <span class=\"regexp\">//</span> [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This only works on primitive data types, e.g. Strings, Numbers, etc.</p>\n</body></html>",
          "itemtype": "method",
          "name": "uniq",
          "return": {
            "description": "",
            "type": "Ember.Enumerable"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 866,
          "description": "<html><head></head><body><p>Registers an enumerable observer. Must implement <code>Ember.EnumerableObserver</code>\nmixin.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addEnumerableObserver",
          "params": [
            {
              "name": "target",
              "description": "",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "this"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 895,
          "description": "<html><head></head><body><p>Removes a registered enumerable observer.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeEnumerableObserver",
          "params": [
            {
              "name": "target",
              "description": "",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "this"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 936,
          "description": "<html><head></head><body><p>Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.</p>\n</body></html>",
          "itemtype": "method",
          "name": "enumerableContentWillChange",
          "params": [
            {
              "name": "removing",
              "description": "An enumerable of the objects to\n  be removed or the number of items to be removed.",
              "type": "Ember.Enumerable|Number"
            },
            {
              "name": "adding",
              "description": "An enumerable of the objects to be\n  added or the number of items to be added.",
              "type": "Ember.Enumerable|Number"
            }
          ],
          "chainable": 1,
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 989,
          "description": "<html><head></head><body><p>Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If you are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.</p>\n</body></html>",
          "itemtype": "method",
          "name": "enumerableContentDidChange",
          "params": [
            {
              "name": "removing",
              "description": "An enumerable of the objects to\n  be removed or the number of items to be removed.",
              "type": "Ember.Enumerable|Number"
            },
            {
              "name": "adding",
              "description": "An enumerable of the objects to\n  be added or the number of items to be added.",
              "type": "Ember.Enumerable|Number"
            }
          ],
          "chainable": 1,
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1044,
          "description": "<html><head></head><body><p>Converts the enumerable into an array and sorts by the keys\nspecified in the argument.</p>\n<p>You may provide multiple arguments to sort by multiple properties.</p>\n</body></html>",
          "itemtype": "method",
          "name": "sortBy",
          "params": [
            {
              "name": "property",
              "description": "name(s) to sort on",
              "type": "String"
            }
          ],
          "return": {
            "description": "The sorted array.",
            "type": "Array"
          },
          "since": "2.15.2",
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1075,
          "description": "<html><head></head><body><p>Returns a new enumerable that contains only items containing a unique property value.\nThe default implementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> arr = [{ value: <span class=\"string\">&apos;a&apos;</span> }, { value: <span class=\"string\">&apos;a&apos;</span> }, { value: <span class=\"string\">&apos;b&apos;</span> }, { value: <span class=\"string\">&apos;b&apos;</span> }];\narr.uniqBy(<span class=\"string\">&apos;value&apos;</span>);  // [{ value: <span class=\"string\">&apos;a&apos;</span> }, { value: <span class=\"string\">&apos;b&apos;</span> }]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "uniqBy",
          "return": {
            "description": "",
            "type": "Ember.Enumerable"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1104,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed object can be found in the enumerable.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">2</span>);                     <span class=\"comment\">// true</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">4</span>);                     <span class=\"comment\">// false</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, undefined].includes(undefined);     <span class=\"comment\">// true</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, null].includes(null);               <span class=\"comment\">// true</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, NaN].includes(NaN);                 <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "includes",
          "params": [
            {
              "name": "obj",
              "description": "The object to search for.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "`true` if object is found in the enumerable.",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 96,
          "description": "<html><head></head><body><p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Implement this method to make your class enumerable.</p>\n<p>This method will be called repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don&apos;t have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.</p>\n<p>The <code>previousObject</code> is the object that was returned from the last call\nto <code>nextObject</code> for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.</p>\n<p>Finally the context parameter will always contain a hash you can use as\na &quot;scratchpad&quot; to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.</p>\n<p>Generally iterators will continue to call <code>nextObject</code> until the index\nreaches the current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.</p>\n<p>The default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.</p>\n</body></html>",
          "itemtype": "method",
          "name": "nextObject",
          "params": [
            {
              "name": "index",
              "description": "the current index of the iteration",
              "type": "Number"
            },
            {
              "name": "previousObject",
              "description": "the value returned by the last call to\n  `nextObject`.",
              "type": "Object"
            },
            {
              "name": "context",
              "description": "a context object you can use to maintain state.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "the next object in the iteration or undefined",
            "type": "Object"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 211,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\n\narr.contains(<span class=\"string\">&apos;a&apos;</span>); <span class=\"regexp\">//</span> <span class=\"keyword\">true</span>\narr.contains(<span class=\"string\">&apos;z&apos;</span>); <span class=\"regexp\">//</span> <span class=\"keyword\">false</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "contains",
          "deprecated": true,
          "deprecationMessage": "Use `Enumerable#includes` instead. See https://emberjs.com/deprecations/v2.x#toc_enumerable-contains",
          "params": [
            {
              "name": "obj",
              "description": "The object to search for.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "`true` if object is found in enumerable.",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 241,
          "description": "<html><head></head><body><p>Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the <code>forEach()</code> method defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "forEach",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 292,
          "description": "<html><head></head><body><p>Alias for <code>mapBy</code></p>\n</body></html>",
          "itemtype": "method",
          "name": "getEach",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 302,
          "description": "<html><head></head><body><p>Sets the value on the named property for each member. This is more\nergonomic than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to <code>set(),</code> otherwise\nit will be set directly. <code>null</code> objects are skipped.</p>\n</body></html>",
          "itemtype": "method",
          "name": "setEach",
          "params": [
            {
              "name": "key",
              "description": "The key to set",
              "type": "String"
            },
            {
              "name": "value",
              "description": "The object to set",
              "type": "Object"
            }
          ],
          "return": {
            "description": "receiver",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 318,
          "description": "<html><head></head><body><p>Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to <code>map()</code> defined in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the mapped value.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "map",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 353,
          "description": "<html><head></head><body><p>Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.</p>\n</body></html>",
          "itemtype": "method",
          "name": "mapBy",
          "params": [
            {
              "name": "key",
              "description": "name of the property",
              "type": "String"
            }
          ],
          "return": {
            "description": "The mapped array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 366,
          "description": "<html><head></head><body><p>Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to <code>filter()</code> defined in\nJavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "filter",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A filtered array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 407,
          "description": "<html><head></head><body><p>Returns an array with all of the items in the enumeration where the passed\nfunction returns false. This method is the inverse of filter().</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><em>item</em> is the current item in the iteration.</li>\n<li><em>index</em> is the current index in the iteration</li>\n<li><em>enumerable</em> is the enumerable object itself.</li>\n</ul>\n<p>It should return a falsey value to include the item in the results.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as &quot;this&quot; on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "reject",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "A rejected array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 440,
          "description": "<html><head></head><body><p>Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n</body></html>",
          "itemtype": "method",
          "name": "filterBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "*",
              "optional": true
            }
          ],
          "return": {
            "description": "filtered array",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 455,
          "description": "<html><head></head><body><p>Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.</p>\n</body></html>",
          "itemtype": "method",
          "name": "rejectBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "rejected array",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 474,
          "description": "<html><head></head><body><p>Returns the first item in the array for which the callback returns true.\nThis method works similar to the <code>filter()</code> method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n</body></html>",
          "itemtype": "method",
          "name": "find",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "Found item or `undefined`.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 532,
          "description": "<html><head></head><body><p>Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to <code>true</code>.</p>\n<p>This method works much like the more generic <code>find()</code> method.</p>\n</body></html>",
          "itemtype": "method",
          "name": "findBy",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against.",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "found item or `undefined`",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 549,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed function returns true for every item in the\nenumeration. This corresponds with the <code>every()</code> method in JavaScript 1.6.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return the <code>true</code> or <code>false</code>.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Example Usage:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">if</span> (people.<span class=\"keyword\">every</span>(isEngineer)) {\n  Paychecks.addBigBonus();\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "every",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 588,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed property resolves to the value of the second\nargument for all items in the enumerable. This method is often simpler/faster\nthan using a callback.</p>\n<p>Note that like the native <code>Array.every</code>, <code>isEvery</code> will return true when called\non any empty enumerable.</p>\n</body></html>",
          "itemtype": "method",
          "name": "isEvery",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against. Defaults to `true`",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "2.15.2",
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 607,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed function returns true for any item in the\nenumeration.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>It should return <code>true</code> to include the item in the results, <code>false</code>\notherwise.</p>\n<p>Note that in addition to a callback, you can also pass an optional target\nobject that will be set as <code>this</code> on the context. This is a good way\nto give your iterator function access to the current object.</p>\n<p>Usage Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">if</span> (people.<span class=\"built_in\">any</span>(isManager)) {\n  Paychecks.addBiggerBonus();\n}</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "any",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "target",
              "description": "The target object to use",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "`true` if the passed function returns `true` for any item",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 665,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed property resolves to the value of the second\nargument for any item in the enumerable. This method is often simpler/faster\nthan using a callback.</p>\n</body></html>",
          "itemtype": "method",
          "name": "isAny",
          "params": [
            {
              "name": "key",
              "description": "the property to test",
              "type": "String"
            },
            {
              "name": "value",
              "description": "optional value to test against. Defaults to `true`",
              "type": "String",
              "optional": true
            }
          ],
          "return": {
            "description": "",
            "type": "Boolean"
          },
          "since": "2.15.2",
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 681,
          "description": "<html><head></head><body><p>This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the <code>reduce()</code> method defined in JavaScript 1.8.</p>\n<p>The callback method you provide should have the following signature (all\nparameters are optional):</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n</pre></td>\n              <td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(previousValue, item, <span class=\"keyword\">index</span>, enumerable)</span>;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<ul>\n<li><code>previousValue</code> is the value returned by the last call to the iterator.</li>\n<li><code>item</code> is the current item in the iteration.</li>\n<li><code>index</code> is the current index in the iteration.</li>\n<li><code>enumerable</code> is the enumerable object itself.</li>\n</ul>\n<p>Return the new cumulative value.</p>\n<p>In addition to the callback you can also pass an <code>initialValue</code>. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.</p>\n<p>Note that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It&apos;s part of the\nspec. Sorry.</p>\n</body></html>",
          "itemtype": "method",
          "name": "reduce",
          "params": [
            {
              "name": "callback",
              "description": "The callback to execute",
              "type": "Function"
            },
            {
              "name": "initialValue",
              "description": "Initial value for the reduce",
              "type": "Object"
            },
            {
              "name": "reducerProperty",
              "description": "internal use only.",
              "type": "String"
            }
          ],
          "return": {
            "description": "The reduced value.",
            "type": "Object"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 729,
          "description": "<html><head></head><body><p>Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.</p>\n</body></html>",
          "itemtype": "method",
          "name": "invoke",
          "params": [
            {
              "name": "methodName",
              "description": "the name of the method",
              "type": "String"
            },
            {
              "name": "args",
              "description": "optional arguments to pass as well.",
              "type": "Object..."
            }
          ],
          "return": {
            "description": "return values from calling invoke.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 754,
          "description": "<html><head></head><body><p>Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.</p>\n</body></html>",
          "itemtype": "method",
          "name": "toArray",
          "return": {
            "description": "the enumerable as an array.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 770,
          "description": "<html><head></head><body><p>Returns a copy of the array with all <code>null</code> and <code>undefined</code> elements removed.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"literal\">null</span>, <span class=\"string\">&apos;c&apos;</span>, <span class=\"literal\">undefined</span>];\narr.compact();  <span class=\"comment\">// [&apos;a&apos;, &apos;c&apos;]</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "compact",
          "return": {
            "description": "the array without null and undefined elements.",
            "type": "Array"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 786,
          "description": "<html><head></head><body><p>Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type.\nIf the receiver does not contain the value it returns the original enumerable.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\narr.without(<span class=\"string\">&apos;a&apos;</span>);  // [<span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "without",
          "params": [
            {
              "name": "value",
              "description": "",
              "type": "Object"
            }
          ],
          "return": {
            "description": "",
            "type": "Ember.Enumerable"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 818,
          "description": "<html><head></head><body><p>Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre>let arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;b&apos;</span>];\narr.uni<span class=\"string\">q()</span>;  <span class=\"regexp\">//</span> [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This only works on primitive data types, e.g. Strings, Numbers, etc.</p>\n</body></html>",
          "itemtype": "method",
          "name": "uniq",
          "return": {
            "description": "",
            "type": "Ember.Enumerable"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 866,
          "description": "<html><head></head><body><p>Registers an enumerable observer. Must implement <code>Ember.EnumerableObserver</code>\nmixin.</p>\n</body></html>",
          "itemtype": "method",
          "name": "addEnumerableObserver",
          "params": [
            {
              "name": "target",
              "description": "",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "this"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 895,
          "description": "<html><head></head><body><p>Removes a registered enumerable observer.</p>\n</body></html>",
          "itemtype": "method",
          "name": "removeEnumerableObserver",
          "params": [
            {
              "name": "target",
              "description": "",
              "type": "Object"
            },
            {
              "name": "opts",
              "description": "",
              "type": "Object",
              "optional": true
            }
          ],
          "return": {
            "description": "this"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 936,
          "description": "<html><head></head><body><p>Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.</p>\n</body></html>",
          "itemtype": "method",
          "name": "enumerableContentWillChange",
          "params": [
            {
              "name": "removing",
              "description": "An enumerable of the objects to\n  be removed or the number of items to be removed.",
              "type": "Ember.Enumerable|Number"
            },
            {
              "name": "adding",
              "description": "An enumerable of the objects to be\n  added or the number of items to be added.",
              "type": "Ember.Enumerable|Number"
            }
          ],
          "chainable": 1,
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 989,
          "description": "<html><head></head><body><p>Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If you are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.</p>\n</body></html>",
          "itemtype": "method",
          "name": "enumerableContentDidChange",
          "params": [
            {
              "name": "removing",
              "description": "An enumerable of the objects to\n  be removed or the number of items to be removed.",
              "type": "Ember.Enumerable|Number"
            },
            {
              "name": "adding",
              "description": "An enumerable of the objects to\n  be added or the number of items to be added.",
              "type": "Ember.Enumerable|Number"
            }
          ],
          "chainable": 1,
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1044,
          "description": "<html><head></head><body><p>Converts the enumerable into an array and sorts by the keys\nspecified in the argument.</p>\n<p>You may provide multiple arguments to sort by multiple properties.</p>\n</body></html>",
          "itemtype": "method",
          "name": "sortBy",
          "params": [
            {
              "name": "property",
              "description": "name(s) to sort on",
              "type": "String"
            }
          ],
          "return": {
            "description": "The sorted array.",
            "type": "Array"
          },
          "since": "2.15.2",
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1075,
          "description": "<html><head></head><body><p>Returns a new enumerable that contains only items containing a unique property value.\nThe default implementation returns an array regardless of the receiver type.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> arr = [{ value: <span class=\"string\">&apos;a&apos;</span> }, { value: <span class=\"string\">&apos;a&apos;</span> }, { value: <span class=\"string\">&apos;b&apos;</span> }, { value: <span class=\"string\">&apos;b&apos;</span> }];\narr.uniqBy(<span class=\"string\">&apos;value&apos;</span>);  // [{ value: <span class=\"string\">&apos;a&apos;</span> }, { value: <span class=\"string\">&apos;b&apos;</span> }]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "uniqBy",
          "return": {
            "description": "",
            "type": "Ember.Enumerable"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 1104,
          "description": "<html><head></head><body><p>Returns <code>true</code> if the passed object can be found in the enumerable.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">2</span>);                     <span class=\"comment\">// true</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">4</span>);                     <span class=\"comment\">// false</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, undefined].includes(undefined);     <span class=\"comment\">// true</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, null].includes(null);               <span class=\"comment\">// true</span>\n[<span class=\"number\">1</span>, <span class=\"number\">2</span>, NaN].includes(NaN);                 <span class=\"comment\">// true</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "includes",
          "params": [
            {
              "name": "obj",
              "description": "The object to search for.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "`true` if object is found in the enumerable.",
            "type": "Boolean"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 220,
          "description": "<html><head></head><body><p><strong>Required.</strong> You must implement this method to apply this mixin.</p>\n<p>Your array must support the <code>length</code> property. Your replace methods should\nset this property whenever it changes.</p>\n</body></html>",
          "itemtype": "property",
          "name": "length",
          "type": "Number",
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 287,
          "description": "<html><head></head><body><p>This is the handler for the special array content property. If you get\nthis property, it will return this. If you set this property to a new\narray, it will replace the current content.</p>\n<p>This property overrides the default property defined in <code>Ember.Enumerable</code>.</p>\n</body></html>",
          "itemtype": "property",
          "name": "[]",
          "return": {
            "description": "this"
          },
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 510,
          "description": "<html><head></head><body><p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n</body></html>",
          "itemtype": "property",
          "name": "hasArrayObservers",
          "type": "Boolean",
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/array.js",
          "line": 606,
          "description": "<html><head></head><body><p>Returns a special object that can be used to observe individual properties\non the array. Just get an equivalent property on this object and it will\nreturn an enumerable that maps automatically to the named key on the\nmember objects.</p>\n<p><code>@each</code> should only be used in a non-terminal context. Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>myMethod: computed(<span class=\"string\">&apos;posts.@each.author&apos;</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{\n  ...\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If you merely want to watch for the array being changed, like an object being\nreplaced, added or removed, use <code>[]</code> instead of <code>@each</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>myMethod: computed(<span class=\"string\">&apos;posts.[]&apos;</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>{\n  ...\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "@each",
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Array"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 134,
          "description": "<html><head></head><body><p>Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.</p>\n<p>If you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstObject&apos;</span>);  <span class=\"comment\">// &apos;a&apos;</span>\n\n<span class=\"keyword\">let</span> arr = [];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstObject&apos;</span>);  <span class=\"comment\">// undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "firstObject",
          "return": {
            "description": "the object or undefined",
            "type": "Object"
          },
          "readonly": "",
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 171,
          "description": "<html><head></head><body><p>Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastObject&apos;</span>);  <span class=\"comment\">// &apos;c&apos;</span>\n\n<span class=\"keyword\">let</span> arr = [];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastObject&apos;</span>);  <span class=\"comment\">// undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "lastObject",
          "return": {
            "description": "the last object or undefined",
            "type": "Object"
          },
          "readonly": "",
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 845,
          "description": "<html><head></head><body><p>This property will trigger anytime the enumerable&apos;s content changes.\nYou can observe this property to be notified of changes to the enumerable&apos;s\ncontent.</p>\n<p>For plain enumerables, this property is read only. <code>Array</code> overrides\nthis method.</p>\n</body></html>",
          "itemtype": "property",
          "name": "[]",
          "type": "Array",
          "return": {
            "description": "this"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 923,
          "description": "<html><head></head><body><p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n</body></html>",
          "itemtype": "property",
          "name": "hasEnumerableObservers",
          "type": "Boolean",
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 134,
          "description": "<html><head></head><body><p>Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.</p>\n<p>If you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstObject&apos;</span>);  <span class=\"comment\">// &apos;a&apos;</span>\n\n<span class=\"keyword\">let</span> arr = [];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstObject&apos;</span>);  <span class=\"comment\">// undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "firstObject",
          "return": {
            "description": "the object or undefined",
            "type": "Object"
          },
          "readonly": "",
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 171,
          "description": "<html><head></head><body><p>Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return <code>undefined</code>.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> arr = [<span class=\"string\">&apos;a&apos;</span>, <span class=\"string\">&apos;b&apos;</span>, <span class=\"string\">&apos;c&apos;</span>];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastObject&apos;</span>);  <span class=\"comment\">// &apos;c&apos;</span>\n\n<span class=\"keyword\">let</span> arr = [];\narr.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastObject&apos;</span>);  <span class=\"comment\">// undefined</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "property",
          "name": "lastObject",
          "return": {
            "description": "the last object or undefined",
            "type": "Object"
          },
          "readonly": "",
          "access": "public",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 845,
          "description": "<html><head></head><body><p>This property will trigger anytime the enumerable&apos;s content changes.\nYou can observe this property to be notified of changes to the enumerable&apos;s\ncontent.</p>\n<p>For plain enumerables, this property is read only. <code>Array</code> overrides\nthis method.</p>\n</body></html>",
          "itemtype": "property",
          "name": "[]",
          "type": "Array",
          "return": {
            "description": "this"
          },
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        },
        {
          "file": "packages/ember-runtime/lib/mixins/enumerable.js",
          "line": 923,
          "description": "<html><head></head><body><p>Becomes true whenever the array currently has observers watching changes\non the array.</p>\n</body></html>",
          "itemtype": "property",
          "name": "hasEnumerableObservers",
          "type": "Boolean",
          "access": "private",
          "tagname": "",
          "class": "Ember.NativeArray",
          "module": "ember",
          "submodule": "ember-runtime",
          "namespace": "Ember",
          "version": "2.15.2",
          "since": "2.15.2",
          "inherited": true,
          "inheritedFrom": "Ember.Enumerable"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-2.15.2-ember",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-2.15.2",
          "type": "project-version"
        }
      }
    }
  }
}