{
  "data": {
    "id": "ember-2.16.0-ComputedProperty",
    "type": "namespace",
    "attributes": {
      "name": "ComputedProperty",
      "shortname": "ComputedProperty",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": "",
      "file": "packages/ember-metal/lib/computed.js",
      "line": 25,
      "description": "<html><head></head><body><p>A computed property transforms an object literal with object&apos;s accessor function(s) into a property.</p>\n<p>By default the function backing the computed property will only be called\nonce and the result will be cached. You can specify various properties\nthat your computed property depends on. This will force the cached\nresult to be recomputed if the dependencies are modified.</p>\n<p>In the following example we declare a computed property - <code>fullName</code> - by calling\n<code>computed</code> with property dependencies (<code>firstName</code> and <code>lastName</code>) as leading arguments and getter accessor function. The <code>fullName</code> getter function\nwill be called once (regardless of how many times it is accessed) as long\nas its dependencies have not changed. Once <code>firstName</code> or <code>lastName</code> are updated\nany future calls (or anything bound) to <code>fullName</code> will incorporate the new\nvalues.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">import</span> EmberObject, { computed } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">let</span> Person = EmberObject.extend({\n  <span class=\"comment\">// these will be supplied by `create`</span>\n  firstName: <span class=\"literal\">null</span>,\n  <span class=\"attr\">lastName</span>: <span class=\"literal\">null</span>,\n\n  <span class=\"attr\">fullName</span>: computed(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n    <span class=\"keyword\">let</span> firstName = <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;firstName&apos;</span>),\n        lastName  = <span class=\"keyword\">this</span>.get(<span class=\"string\">&apos;lastName&apos;</span>);\n\n    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">${firstName}</span> <span class=\"subst\">${lastName}</span>`</span>;\n  })\n});\n\n<span class=\"keyword\">let</span> tom = Person.create({\n  <span class=\"attr\">firstName</span>: <span class=\"string\">&apos;Tom&apos;</span>,\n  <span class=\"attr\">lastName</span>: <span class=\"string\">&apos;Dale&apos;</span>\n});\n\ntom.get(<span class=\"string\">&apos;fullName&apos;</span>) <span class=\"comment\">// &apos;Tom Dale&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can also define what Ember should do when setting a computed property by providing additional function (<code>set</code>) in hash argument.\nIf you try to set a computed property, it will try to invoke setter accessor function with the key and\nvalue you want to set it to as arguments.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n</pre></td>\n              <td class=\"code\"><pre>import EmberObject, { computed } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">let</span> Person = EmberObject.extend({\n  <span class=\"comment\">// these will be supplied by `create`</span>\n  firstName: <span class=\"literal\">null</span>,\n  lastName: <span class=\"literal\">null</span>,\n\n  fullName: computed(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, {\n    <span class=\"keyword\">get</span>(key) {\n      <span class=\"keyword\">let</span> firstName = <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>),\n          lastName  = <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastName&apos;</span>);\n\n      <span class=\"keyword\">return</span> firstName + <span class=\"string\">&apos; &apos;</span> + lastName;\n    },\n    <span class=\"keyword\">set</span>(key, <span class=\"keyword\">value</span>) {\n      <span class=\"keyword\">let</span> [firstName, lastName] = <span class=\"keyword\">value</span>.split(<span class=\"string\">&apos; &apos;</span>);\n\n      <span class=\"keyword\">this</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;firstName&apos;</span>, firstName);\n      <span class=\"keyword\">this</span>.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;lastName&apos;</span>, lastName);\n\n      <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>;\n    }\n  })\n});\n\n<span class=\"keyword\">let</span> person = Person.create();\n\nperson.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;fullName&apos;</span>, <span class=\"string\">&apos;Peter Wagenet&apos;</span>);\nperson.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>); <span class=\"comment\">// &apos;Peter&apos;</span>\nperson.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastName&apos;</span>);  <span class=\"comment\">// &apos;Wagenet&apos;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>You can overwrite computed property with normal property (no longer computed), that won&apos;t change if dependencies change, if you set computed property and it won&apos;t have setter accessor function defined.</p>\n<p>You can also mark computed property as <code>.readOnly()</code> and block all attempts to set it.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n              <td class=\"code\"><pre>import EmberObject, { computed } <span class=\"keyword\">from</span> <span class=\"string\">&apos;@ember/object&apos;</span>;\n\n<span class=\"keyword\">let</span> Person = EmberObject.extend({\n  <span class=\"comment\">// these will be supplied by `create`</span>\n  firstName: <span class=\"literal\">null</span>,\n  lastName: <span class=\"literal\">null</span>,\n\n  fullName: computed(<span class=\"string\">&apos;firstName&apos;</span>, <span class=\"string\">&apos;lastName&apos;</span>, {\n    <span class=\"keyword\">get</span>(key) {\n      <span class=\"keyword\">let</span> firstName = <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;firstName&apos;</span>);\n      <span class=\"keyword\">let</span> lastName  = <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;lastName&apos;</span>);\n\n      <span class=\"keyword\">return</span> firstName + <span class=\"string\">&apos; &apos;</span> + lastName;\n    }\n  }).readOnly()\n});\n\n<span class=\"keyword\">let</span> person = Person.create();\nperson.<span class=\"keyword\">set</span>(<span class=\"string\">&apos;fullName&apos;</span>, <span class=\"string\">&apos;Peter Wagenet&apos;</span>); <span class=\"comment\">// Uncaught Error: Cannot set read-only property &quot;fullName&quot; on object: &lt;(...):emberXXX&gt;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Additional resources:</p>\n<ul>\n<li><a href=\"https://github.com/emberjs/rfcs/blob/master/text/0011-improved-cp-syntax.md\">New CP syntax RFC</a></li>\n<li><a href=\"https://emberjs.com/blog/2015/05/13/ember-1-12-released.html#toc_new-computed-syntax\">New computed syntax explained in &quot;Ember 1.12 released&quot; </a></li>\n</ul>\n</body></html>",
      "static": 1,
      "access": "public",
      "tagname": "",
      "version": "2.16.0",
      "since": "2.16.0",
      "methods": [],
      "events": [],
      "properties": []
    },
    "relationships": {
      "parent-class": {
        "data": null
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-2.16.0-@ember/object",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-2.16.0",
          "type": "project-version"
        }
      }
    }
  }
}