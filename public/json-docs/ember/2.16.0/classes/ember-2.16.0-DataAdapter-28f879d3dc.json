{
  "data": {
    "id": "ember-2.16.0-DataAdapter",
    "type": "class",
    "attributes": {
      "name": "DataAdapter",
      "shortname": "DataAdapter",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/debug",
      "namespace": "",
      "file": "packages/ember-extension-support/lib/data_adapter.js",
      "line": 17,
      "description": "<html><head></head><body><p>The <code>DataAdapter</code> helps a data persistence library\ninterface with tools that debug Ember such\nas the <a href=\"https://github.com/tildeio/ember-extension\">Ember Extension</a>\nfor Chrome and Firefox.</p>\n<p>This class will be extended by a persistence library\nwhich will override some of the methods with\nlibrary-specific code.</p>\n<p>The methods likely to be overridden are:</p>\n<ul>\n<li><code>getFilters</code></li>\n<li><code>detect</code></li>\n<li><code>columnsForType</code></li>\n<li><code>getRecords</code></li>\n<li><code>getRecordColumnValues</code></li>\n<li><code>getRecordKeywords</code></li>\n<li><code>getRecordFilterValues</code></li>\n<li><code>getRecordColor</code></li>\n<li><code>observeRecord</code></li>\n</ul>\n<p>The adapter will need to be registered\nin the application&apos;s container as <code>dataAdapter:main</code>.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre><span class=\"selector-tag\">Application</span><span class=\"selector-class\">.initializer</span>({\n  <span class=\"attribute\">name</span>: <span class=\"string\">&quot;data-adapter&quot;</span>,\n\n  initialize: <span class=\"built_in\">function</span>(application) {\n    application.<span class=\"built_in\">register</span>(<span class=\"string\">&apos;data-adapter:main&apos;</span>, DS.DataAdapter);\n  }\n});</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
      "extends": "EmberObject",
      "access": "public",
      "tagname": "",
      "version": "2.16.0",
      "since": "2.16.0",
      "methods": [
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 111,
          "description": "<html><head></head><body><p>Specifies how records can be filtered.\nRecords returned will need to have a <code>filterValues</code>\nproperty with a key for every name in the returned array.</p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "getFilters",
          "return": {
            "description": "List of objects defining filters.\n The object should have a `name` and `desc` property.",
            "type": "Array"
          },
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0",
          "since": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 125,
          "description": "<html><head></head><body><p>Fetch the model types and observe them for changes.</p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "watchModelTypes",
          "params": [
            {
              "name": "typesAdded",
              "description": "Callback to call to add types.\nTakes an array of objects containing wrapped types (returned from `wrapModelType`).",
              "type": "Function"
            },
            {
              "name": "typesUpdated",
              "description": "Callback to call when a type has changed.\nTakes an array of objects containing wrapped types.",
              "type": "Function"
            }
          ],
          "return": {
            "description": "Method to call to remove all observers",
            "type": "Function"
          },
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0",
          "since": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 170,
          "description": "<html><head></head><body><p>Fetch the records of a given type and observe them for changes.</p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "method",
          "name": "watchRecords",
          "params": [
            {
              "name": "modelName",
              "description": "The model name.",
              "type": "String"
            },
            {
              "name": "recordsAdded",
              "description": "Callback to call to add records.\nTakes an array of objects containing wrapped records.\nThe object should have the following properties:\n  columnValues: {Object} The key and value of a table cell.\n  object: {Object} The actual record object.",
              "type": "Function"
            },
            {
              "name": "recordsUpdated",
              "description": "Callback to call when a record has changed.\nTakes an array of objects containing wrapped records.",
              "type": "Function"
            },
            {
              "name": "recordsRemoved",
              "description": "Callback to call when a record has removed.\nTakes the following parameters:\n  index: The array index where the records were removed.\n  count: The number of records removed.",
              "type": "Function"
            }
          ],
          "return": {
            "description": "Method to call to remove all observers.",
            "type": "Function"
          },
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0",
          "since": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 237,
          "description": "<html><head></head><body><p>Clear all observers before destruction</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "willDestroy",
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0",
          "since": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 247,
          "description": "<html><head></head><body><p>Detect whether a class is a model.</p>\n<p>Test that against the model class\nof your persistence library.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "detect",
          "params": [
            {
              "name": "klass",
              "description": "The class to test.",
              "type": "Class"
            }
          ],
          "return": {
            "description": "boolean Whether the class is a model class or not."
          },
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0",
          "since": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 262,
          "description": "<html><head></head><body><p>Get the columns for a given model type.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "columnsForType",
          "params": [
            {
              "name": "type",
              "description": "The model type.",
              "type": "Class"
            }
          ],
          "return": {
            "description": "An array of columns of the following format:\n name: {String} The name of the column.\n desc: {String} Humanized description (what would show in a table column name).",
            "type": "Array"
          },
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0",
          "since": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 276,
          "description": "<html><head></head><body><p>Adds observers to a model type class.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "observeModelType",
          "params": [
            {
              "name": "modelName",
              "description": "The model type name.",
              "type": "String"
            },
            {
              "name": "typesUpdated",
              "description": "Called when a type is modified.",
              "type": "Function"
            }
          ],
          "return": {
            "description": "The function to call to remove observers.",
            "type": "Function"
          },
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0",
          "since": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 313,
          "description": "<html><head></head><body><p>Wraps a given model type and observes changes to it.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "wrapModelType",
          "params": [
            {
              "name": "klass",
              "description": "A model class.",
              "type": "Class"
            },
            {
              "name": "modelName",
              "description": "Name of the class.",
              "type": "String"
            }
          ],
          "return": {
            "description": "Contains the wrapped type and the function to remove observers\nFormat:\n  type: {Object} The wrapped type.\n    The wrapped type has the following format:\n      name: {String} The name of the type.\n      count: {Integer} The number of records available.\n      columns: {Columns} An array of columns to describe the record.\n      object: {Class} The actual Model type class.\n  release: {Function} The function to remove observers.",
            "type": "Object"
          },
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0",
          "since": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 345,
          "description": "<html><head></head><body><p>Fetches all models defined in the application.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getModelTypes",
          "return": {
            "description": "Array of model types.",
            "type": "Array"
          },
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0",
          "since": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 374,
          "description": "<html><head></head><body><p>Loops over all namespaces and all objects\nattached to them.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_getObjectsOnNamespaces",
          "return": {
            "description": "Array of model type strings.",
            "type": "Array"
          },
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0",
          "since": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 399,
          "description": "<html><head></head><body><p>Fetches all loaded records for a given type.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getRecords",
          "return": {
            "description": "An array of records.\n This array will be observed for changes,\n so it should update when new records are added/removed.",
            "type": "Array"
          },
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0",
          "since": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 412,
          "description": "<html><head></head><body><p>Wraps a record and observers changes to it.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "wrapRecord",
          "params": [
            {
              "name": "record",
              "description": "The record instance.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The wrapped record. Format:\ncolumnValues: {Array}\nsearchKeywords: {Array}",
            "type": "Object"
          },
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0",
          "since": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 433,
          "description": "<html><head></head><body><p>Gets the values for each column.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getRecordColumnValues",
          "return": {
            "description": "Keys should match column names defined\nby the model type.",
            "type": "Object"
          },
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0",
          "since": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 445,
          "description": "<html><head></head><body><p>Returns keywords to match when searching records.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getRecordKeywords",
          "return": {
            "description": "Relevant keywords for search.",
            "type": "Array"
          },
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0",
          "since": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 456,
          "description": "<html><head></head><body><p>Returns the values of filters defined by <code>getFilters</code>.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getRecordFilterValues",
          "params": [
            {
              "name": "record",
              "description": "The record instance.",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The filter values.",
            "type": "Object"
          },
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0",
          "since": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 468,
          "description": "<html><head></head><body><p>Each record can have a color that represents its state.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "getRecordColor",
          "params": [
            {
              "name": "record",
              "description": "The record instance",
              "type": "Object"
            }
          ],
          "return": {
            "description": "The records color.\n  Possible options: black, red, blue, green.",
            "type": "String"
          },
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0",
          "since": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 481,
          "description": "<html><head></head><body><p>Observes all relevant properties and re-sends the wrapped record\nwhen a change occurs.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "observerRecord",
          "params": [
            {
              "name": "record",
              "description": "The record instance.",
              "type": "Object"
            },
            {
              "name": "recordUpdated",
              "description": "The callback to call when a record is updated.",
              "type": "Function"
            }
          ],
          "return": {
            "description": "The function to call to remove all observers.",
            "type": "Function"
          },
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0",
          "since": "2.16.0"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 209,
          "description": "<html><head></head><body><p>An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.</p>\n<p>Example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">const</span> Person = Ember.Object.extend({\n  init() {\n    alert(`Name <span class=\"keyword\">is</span> ${<span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;name&apos;</span>)}`);\n  }\n});\n\n<span class=\"keyword\">let</span> steve = Person.create({\n  name: <span class=\"string\">&apos;Steve&apos;</span>\n});\n\n<span class=\"comment\">// alerts &apos;Name is Steve&apos;.</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code>,\nbe sure to call <code>this._super(...arguments)</code> in your\n<code>init</code> declaration! If you don&apos;t, Ember may not have an opportunity to\ndo important setup work, and you&apos;ll see strange behavior in your\napplication.</p>\n</body></html>",
          "itemtype": "method",
          "name": "init",
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "version": "2.16.0",
          "since": "2.16.0",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 444,
          "description": "<html><head></head><body><p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its\nmetadata, which effectively destroys observers and bindings.</p>\n<p>If you try to set a property on a destroyed object, an exception will be\nraised.</p>\n<p>Note that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.</p>\n</body></html>",
          "itemtype": "method",
          "name": "destroy",
          "return": {
            "description": "receiver",
            "type": "EmberObject"
          },
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "version": "2.16.0",
          "since": "2.16.0",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 470,
          "description": "<html><head></head><body><p>Override to implement teardown.</p>\n</body></html>",
          "itemtype": "method",
          "name": "willDestroy",
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "version": "2.16.0",
          "since": "2.16.0",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 478,
          "description": "<html><head></head><body><p>Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the <code>destroy</code> method.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "method",
          "name": "_scheduledDestroy",
          "class": "DataAdapter",
          "module": "@ember/object",
          "version": "2.16.0",
          "since": "2.16.0",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 497,
          "description": "<html><head></head><body><p>Returns a string representation which attempts to provide more information\nthan Javascript&apos;s <code>toString</code> typically does, in a generic way for all Ember\nobjects.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>const <span class=\"keyword\">Person</span> = Ember.Object.extend()\n<span class=\"keyword\">person</span> = <span class=\"keyword\">Person</span>.create()\n<span class=\"keyword\">person</span>.toString() //=&gt; <span class=\"string\">&quot;&lt;Person:ember1024&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the object&apos;s class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n              <td class=\"code\"><pre>const <span class=\"attr\">Student</span> = Person.extend()\n<span class=\"keyword\">let</span> <span class=\"attr\">student</span> = Student.create()\nstudent.<span class=\"built_in\">toString</span>() //=&gt; <span class=\"string\">&quot;&lt;(subclass of Person):ember1025&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>If the method <code>toStringExtension</code> is defined, its return value will be\nincluded in the output.</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n              <td class=\"code\"><pre>const Teacher = Person.extend({\n  toStringExtension() {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;fullName&apos;</span>);\n  }\n});\nteacher = Teacher.create()\nteacher.toString(); <span class=\"comment\">//=&gt; &quot;&lt;Teacher:ember1026:Tom Dale&gt;&quot;</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n</body></html>",
          "itemtype": "method",
          "name": "toString",
          "return": {
            "description": "string representation",
            "type": "String"
          },
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "version": "2.16.0",
          "since": "2.16.0",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        }
      ],
      "events": [],
      "properties": [
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 64,
          "description": "<html><head></head><body><p>The container-debug-adapter which is used\nto list all models.</p>\n</body></html>",
          "itemtype": "property",
          "name": "containerDebugAdapter",
          "default": "undefined",
          "since": "2.16.0",
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 75,
          "description": "<html><head></head><body><p>The number of attributes to send\nas columns. (Enough to make the record\nidentifiable).</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "attributeLimit",
          "default": "3",
          "since": "2.16.0",
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 87,
          "description": "<html><head></head><body><p>Ember Data &gt; v1.0.0-beta.18\nrequires string model names to be passed\naround instead of the actual factories.</p>\n<p>This is a stamp for the Ember Inspector\nto differentiate between the versions\nto be able to support older versions too.</p>\n</body></html>",
          "access": "public",
          "tagname": "",
          "itemtype": "property",
          "name": "acceptsModelName",
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0",
          "since": "2.16.0"
        },
        {
          "file": "packages/ember-extension-support/lib/data_adapter.js",
          "line": 101,
          "description": "<html><head></head><body><p>Stores all methods that clear observers.\nThese methods will be called on destruction.</p>\n</body></html>",
          "access": "private",
          "tagname": "",
          "itemtype": "property",
          "name": "releaseMethods",
          "since": "2.16.0",
          "class": "DataAdapter",
          "module": "@ember/debug",
          "version": "2.16.0"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 247,
          "description": "<html><head></head><body><p>Defines the properties that will be concatenated from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&apos;s value by combining the superclass&apos; property\nvalue with the subclass&apos; value. An example of this in use within Ember\nis the <code>classNames</code> property of <code>Ember.View</code>.</p>\n<p>Here is some sample code showing the difference between a concatenated\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td>\n              <td class=\"code\"><pre>const <span class=\"symbol\">Bar</span> = <span class=\"symbol\">Ember</span>.<span class=\"symbol\">Object</span>.extend({\n  // <span class=\"symbol\">Configure</span> which properties to concatenate\n  concatenatedProperties: [<span class=\"string\">&apos;concatenatedProperty&apos;</span>],\n\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;bar&apos;</span>],\n  concatenatedProperty: [<span class=\"string\">&apos;bar&apos;</span>]\n});\n\nconst <span class=\"symbol\">FooBar</span> = <span class=\"symbol\">Bar</span>.extend({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;foo&apos;</span>],\n  concatenatedProperty: [<span class=\"string\">&apos;foo&apos;</span>]\n});\n\nlet fooBar = <span class=\"symbol\">FooBar</span>.create();\nfooBar.get(<span class=\"string\">&apos;someNonConcatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;foo&apos;</span>]\nfooBar.get(<span class=\"string\">&apos;concatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This behavior extends to object creation as well. Continuing the\nabove example:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n              <td class=\"code\"><pre>let fooBar = <span class=\"symbol\">FooBar</span>.create({\n  someNonConcatenatedProperty: [<span class=\"string\">&apos;baz&apos;</span>],\n  concatenatedProperty: [<span class=\"string\">&apos;baz&apos;</span>]\n})\nfooBar.get(<span class=\"string\">&apos;someNonConcatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;baz&apos;</span>]\nfooBar.get(<span class=\"string\">&apos;concatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>, <span class=\"string\">&apos;baz&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Adding a single property that is not an array will just add it in the array:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">let</span> fooBar = FooBar.create({\n  concatenatedProperty: <span class=\"string\">&apos;baz&apos;</span>\n})\nview.get(<span class=\"string\">&apos;concatenatedProperty&apos;</span>); // [<span class=\"string\">&apos;bar&apos;</span>, <span class=\"string\">&apos;foo&apos;</span>, <span class=\"string\">&apos;baz&apos;</span>]</pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the\ncontent of the properties.</p>\n<p>In <code>Ember.Component</code> the <code>classNames</code>, <code>classNameBindings</code> and\n<code>attributeBindings</code> properties are concatenated.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).</p>\n</body></html>",
          "itemtype": "property",
          "name": "concatenatedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "version": "2.16.0",
          "since": "2.16.0",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 320,
          "description": "<html><head></head><body><p>Defines the properties that will be merged from the superclass\n(instead of overridden).</p>\n<p>By default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property&apos;s value by merging the superclass property value\nwith the subclass property&apos;s value. An example of this in use within Ember\nis the <code>queryParams</code> property of routes.</p>\n<p>Here is some sample code showing the difference between a merged\nproperty and a normal one:</p>\n<div class=\"highlight javascript\">\n      <div class=\"ribbon\"></div>\n      <div class=\"scroller\">\n        <table class=\"CodeRay\">\n          <tbody>\n            <tr>\n              <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n</pre></td>\n              <td class=\"code\"><pre><span class=\"keyword\">const</span> Bar = Ember.Object.extend({\n  <span class=\"comment\">// Configure which properties are to be merged</span>\n  mergedProperties: [<span class=\"string\">&apos;mergedProperty&apos;</span>],\n\n  someNonMergedProperty: {\n    nonMerged: <span class=\"string\">&apos;superclass value of nonMerged&apos;</span>\n  },\n  mergedProperty: {\n    page: { replace: <span class=\"literal\">false</span> },\n    limit: { replace: <span class=\"literal\">true</span> }\n  }\n});\n\n<span class=\"keyword\">const</span> FooBar = Bar.extend({\n  someNonMergedProperty: {\n    completelyNonMerged: <span class=\"string\">&apos;subclass value of nonMerged&apos;</span>\n  },\n  mergedProperty: {\n    limit: { replace: <span class=\"literal\">false</span> }\n  }\n});\n\n<span class=\"keyword\">let</span> fooBar = FooBar.create();\n\nfooBar.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;someNonMergedProperty&apos;</span>);\n<span class=\"comment\">// =&gt; { completelyNonMerged: &apos;subclass value of nonMerged&apos; }</span>\n<span class=\"comment\">//</span>\n<span class=\"comment\">// Note the entire object, including the nonMerged property of</span>\n<span class=\"comment\">// the superclass object, has been replaced</span>\n\nfooBar.<span class=\"keyword\">get</span>(<span class=\"string\">&apos;mergedProperty&apos;</span>);\n<span class=\"comment\">// =&gt; {</span>\n<span class=\"comment\">//   page: {replace: false},</span>\n<span class=\"comment\">//   limit: {replace: false}</span>\n<span class=\"comment\">// }</span>\n<span class=\"comment\">//</span>\n<span class=\"comment\">// Note the page remains from the superclass, and the</span>\n<span class=\"comment\">// `limit` property&apos;s value of `false` has been merged from</span>\n<span class=\"comment\">// the subclass.</span></pre></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    \n<p>This behavior is not available during object <code>create</code> calls. It is only\navailable at <code>extend</code> time.</p>\n<p>In <code>Ember.Route</code> the <code>queryParams</code> property is merged.</p>\n<p>This feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual merged property (to not\nmislead your users to think they can override the property in a subclass).</p>\n</body></html>",
          "itemtype": "property",
          "name": "mergedProperties",
          "type": "Array",
          "default": "null",
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "version": "2.16.0",
          "since": "2.16.0",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 394,
          "description": "<html><head></head><body><p>Destroyed object property flag.</p>\n<p>if this property is <code>true</code> the observers and bindings were already\nremoved by the effect of calling the <code>destroy()</code> method.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isDestroyed",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "version": "2.16.0",
          "since": "2.16.0",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        },
        {
          "file": "packages/ember-runtime/lib/system/core_object.js",
          "line": 419,
          "description": "<html><head></head><body><p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p>\n<p>The object stays intact until the end of the run loop at which point\nthe <code>isDestroyed</code> flag is set.</p>\n</body></html>",
          "itemtype": "property",
          "name": "isDestroying",
          "default": "false",
          "access": "public",
          "tagname": "",
          "class": "DataAdapter",
          "module": "@ember/object",
          "version": "2.16.0",
          "since": "2.16.0",
          "inherited": true,
          "inheritedFrom": "CoreObject"
        }
      ]
    },
    "relationships": {
      "parent-class": {
        "data": {
          "id": "ember-2.16.0-EmberObject",
          "type": "class"
        }
      },
      "descendants": {
        "data": []
      },
      "module": {
        "data": {
          "id": "ember-2.16.0-@ember/debug",
          "type": "module"
        }
      },
      "project-version": {
        "data": {
          "id": "ember-2.16.0",
          "type": "project-version"
        }
      }
    }
  }
}